name: Terraform

on:
  push:
    tags:
      - 'dev-*'
      - 'qa-*'
      - 'prod-*'

jobs:
  plan:
    name: Terraform Plan (${ { github.ref_name } })
    runs-on: ubuntu-latest
    outputs:
      plan-path: ${{ steps.plan.outputs.plan-file }}
      env-name: ${{ steps.tag_parse.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse tag → environment
        id: tag_parse
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          ENV=${TAG%%-*}
          echo "::set-output name=environment::$ENV"
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.6'

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -input=false \
            -var-file="conf/${{ env.ENVIRONMENT }}.tfvars" \
            -out=tfplan
          echo "::set-output name=plan-file::tfplan"

  apply:
    name: Terraform Apply (${ { needs.plan.outputs.env-name } })
    runs-on: ubuntu-latest
    needs: plan
    environment: ${{ needs.plan.outputs.env-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.6'

      - name: Terraform Init
        run: terraform init

      - name: Copy Plan from “plan” job
        run: |
          cp ${{ needs.plan.outputs.plan-path }} tfplan

      - name: Terraform Apply
        run: terraform apply -input=false tfplan
